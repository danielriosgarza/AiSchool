episode:
  mix: {enabled: true, short_horizon: 10, long_horizon: 500, short_prob: 0.1}
  dt_hours: 1.0
  training_mode: fast

simulation:
  min_steps_per_pulse: 10
  steps_per_hour_factor: 50

target:
  type: metabolite
  name: fructose
  use_delta: false

actions:
  pH_mode: emergent
  actuators:
    - {name: q,    type: continuous}
    - {name: v,    type: continuous}
    - {name: stir, type: continuous}
    - {name: temp, type: continuous}
  bounds:
    q:    [0.0, 0.01]
    v:    [0.0, 0.01]
    stir: [0.0, 1.0]
    temp: [25.0, 35.0]
 



observations:
  include: [met.all, pH.used, actuator_echo.all, met.delta.all, met.rate.all]
  population:
    species:
      mode: live        # exposes live counts + shares of bh/bt/ri
    subpopulations:
      mode: 'off'       # current runtime doesn't surface subpop signals
  pipeline:
    - normalize: {method: running_mean_var, clip: [-5, 5]}
    - clip: {min: -10, max: 10}

rewards:
  error_reward: -1000.0
  terms:
    # Short-only production shaping with deadbanded delta
    - {expr: "clip(gate(abs(delta(met['fructose'])), 0.02, delta(met['fructose'])), 0, 1e9) / kpi.horizon", weight: 60.0, when: short}

    # Per-step concentration shaping (always)
    - {expr: "clip((met['fructose'] - 0.1) / 10.0, 0, 1)", weight: 0.5}
    - {expr: "clip((met['fructose'] - 1.0) / 5.0, 0, 1)", weight: 0.5}
    - {expr: "clip((met['fructose'] - 2.0) / 5.0, 0, 1)", weight: 0.5}

    # Penalty for fructose below 1
    - {expr: "clip(0.5 - met['fructose'], 0, 6.0) / kpi.horizon", weight: -2.5}

    # Control costs (always)
    - {expr: "(action.q * dt_hours) / kpi.horizon", weight: -0.5}
    - {expr: "(action.v) / kpi.horizon", weight: -0.8}
    - {expr: "(abs(action.temp - 28)) / kpi.horizon", weight: -0.6}
    - {expr: "(action.stir) / kpi.horizon", weight: -0.25}

    # Long-only per-step sucrose cleanup shaping (normalized by initial ~80 g/L)
    - {expr: "(met['sucrose'] / 80.0) / kpi.horizon", weight: -20.0, when: long}

  terminal:
    # Terminal level bonus (always)
    - {expr: "(clip(met['fructose'] - 5.0, 0, 1e9) ** 1.0)", weight: 40.0}

    # Progressive terminal bonus (long-only)
    - {expr: "(clip((met['fructose'] - 1.0) / 10.0, 0, 1.0) ** 2) * met['fructose']", weight: 30.0, when: long}

    # Success bonus for hitting >=2 (long-only)
    - {expr: "clip(met['fructose'] - 2.0, 0, 1e9)", weight: 120.0, when: long}


    # Carbon concentration penalties (long-only, normalized)
    - {expr: "(met['sucrose'] / 80.0)", weight: -20.0, when: long}
    
init_randomization:
  enabled: false
  